{"version":3,"sources":["components/Header.js","components/FormContainer.js","components/Note.js","components/Modal.js","components/PlaceHolder.js","components/Notes.js","components/ColorToolTip.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","src","alt","FormContainer","addNote","useState","isFormClicked","setIsFormClicked","title","text","color","id","note","setNote","formRef","useRef","inputStyle","display","handleFormClick","event","current","contains","target","closeForm","handleChange","name","value","prev","useEffect","document","body","addEventListener","removeEventListener","ref","autoComplete","onSubmit","preventDefault","placeholder","type","style","onChange","onClick","Note","openModal","handleMouseOver","handleDelete","background","onMouseOver","Modal","modalClass","modalNote","closeModal","handleModelNoteChange","PlaceHolder","Notes","notes","updateNote","setModalClass","setModalNote","displayNotes","map","key","filter","length","ColorToolTip","colorToolTipPosition","handleColorLeave","handleColorClick","transform","horizontal","vertical","onMouseLeave","data-color","App","setNotes","showColorToolTip","setShowColorToolTip","setColorToolTipPosition","colorNoteId","setColorNoteId","notesFromStorage","JSON","parse","localStorage","getItem","setItem","stringify","noteWithId","amendedNote","noteCoords","getBoundingClientRect","left","window","scrollX","top","scrollY","stopPropagation","matches","dataset","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9bb66dd9.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nfunction Header() {\r\n    return (\r\n        <>\r\n            <header>\r\n                <img className=\"header-logo\" src=\"https://www.gstatic.com/images/branding/product/1x/keep_48dp.png\" alt=\"\"/>\r\n                <h2 className=\"header-title\">Keep</h2>\r\n            </header>\r\n      </>\r\n    )\r\n}\r\n\r\nexport default Header","import React, {useState, useRef, useEffect} from \"react\"\r\n\r\nfunction FormContainer({addNote}) {\r\n\r\n    const [isFormClicked, setIsFormClicked] = useState(false)\r\n    const [note, setNote] = useState({\r\n        title: \"\",\r\n        text: \"\",\r\n        color: \"white\",\r\n        id: 0\r\n    })\r\n    const formRef = useRef(null)\r\n\r\n    const inputStyle = isFormClicked ? {display: \"block\"} : {display: \"none\"}\r\n\r\n    function handleFormClick(event) {\r\n        if (formRef.current.contains(event.target)) {\r\n            setIsFormClicked(true)\r\n        } else if (note.title || note.text) {\r\n            addNote(note)\r\n            closeForm()\r\n        } else {\r\n            setIsFormClicked(false)\r\n        }\r\n  }\r\n\r\n    function handleSubmit(event) {\r\n        event.preventDefault()\r\n\r\n        if (note.title || note.text) {\r\n            addNote(note)\r\n            closeForm()\r\n        }\r\n    }\r\n\r\n    function handleChange(event) {\r\n        const {name, value} = event.target\r\n        setNote((prev) => ( {...prev, [name]: value} ))\r\n    }\r\n\r\n    function closeForm() {\r\n        setNote((prev => ( {...prev, title: \"\", text: \"\"} )))\r\n        setIsFormClicked(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        document.body.addEventListener(\"click\", handleFormClick)\r\n    \r\n        return () => document.body.removeEventListener(\"click\", handleFormClick)\r\n    }, [note])\r\n    \r\n\r\n    return (\r\n        <div id=\"form-container\">\r\n            <form\r\n                ref={formRef}\r\n                id=\"form\"\r\n                autoComplete=\"off\"\r\n                className={isFormClicked ? \"form-open\" : \"\"}\r\n                onSubmit={handleSubmit}\r\n            >\r\n                <input\r\n                    name=\"title\"\r\n                    id=\"note-title\"\r\n                    placeholder=\"Title\"\r\n                    type=\"text\"\r\n                    style={inputStyle}\r\n                    onChange={handleChange}\r\n                    value={note.title}\r\n                />\r\n                <input\r\n                    name=\"text\"\r\n                    id=\"note-text\"\r\n                    placeholder=\"Take a note...\"\r\n                    type=\"text\"\r\n                    onChange={handleChange}\r\n                    value={note.text}\r\n                /> \r\n                <div\r\n                    id=\"form-buttons\"\r\n                    style={inputStyle}\r\n                >\r\n                    <button\r\n                        type=\"submit\"\r\n                        id=\"submit-button\"\r\n                    >Submit</button>\r\n\r\n                    <button\r\n                        type=\"button\"\r\n                        id=\"form-close-button\"\r\n                        onClick={closeForm}\r\n                    >Close</button>\r\n\r\n                </div>  \r\n            </form> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FormContainer","import React from \"react\"\r\n\r\n\r\nfunction Note({note, openModal, handleMouseOver, handleDelete}) {\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                style={{background: note.color}}\r\n                className=\"note\"\r\n                onClick={() => openModal(note.id)}\r\n            >\r\n                <div className={note.title && \"note-title\"}>{note.title}</div>\r\n                <div className=\"note-text\">{note.text}</div>\r\n                <div className=\"toolbar-container\">\r\n                    <div className=\"toolbar\">\r\n                        <img\r\n                            className=\"toolbar-color\"\r\n                            src=\"https://icon.now.sh/palette\"\r\n                            alt=\"\"\r\n                            onMouseOver={(event) => handleMouseOver(event, note.id)}\r\n                            />\r\n                        <img\r\n                            className=\"toolbar-delete\"\r\n                            src=\"https://icon.now.sh/delete\"\r\n                            alt=\"\"\r\n                            onClick={(event) => handleDelete(event, note.id)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Note","import React from \"react\"\r\n\r\nfunction Modal({modalClass, modalNote, closeModal, handleModelNoteChange}) {\r\n\r\n    return (\r\n        <div className={`modal ${modalClass}`}>\r\n            <div className=\"modal-content\">\r\n                <input\r\n                    name=\"title\"\r\n                    className=\"modal-title\"\r\n                    placeholder=\"Title\"\r\n                    type= \"text\"\r\n                    onChange={handleModelNoteChange}\r\n                    value={modalNote.title}\r\n                    />\r\n                <input\r\n                    name=\"text\"\r\n                    className=\"modal-text\"\r\n                    placeholder=\"Take a note...\"\r\n                    type=\"text\"\r\n                    onChange={handleModelNoteChange}\r\n                    value={modalNote.text}\r\n                />   \r\n                <span\r\n                    className=\"modal-close-button\"\r\n                    onClick={closeModal}\r\n                >Close</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Modal","import React from \"react\"\r\n\r\nfunction PlaceHolder() {\r\n    return (\r\n        <div id=\"placeholder\">\r\n            <img\r\n                id=\"placeholder-logo\"\r\n                src=\"https://icon.now.sh/lightbulb_outline\"\r\n                alt=\"\"\r\n            />\r\n            <p id=\"placeholder-text\">Notes you add appear here</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlaceHolder","import React, {useState} from \"react\"\r\nimport Note from \"./Note\"\r\nimport Modal from \"./Modal\"\r\nimport Placeholder from \"./PlaceHolder\"\r\n\r\nfunction Notes({notes, updateNote, handleMouseOver, handleDelete}) {\r\n\r\n    const [modalClass, setModalClass] = useState(\"\")\r\n    const [modalNote, setModalNote] = useState({})   \r\n\r\n    const displayNotes = notes.map((note) => {\r\n        return (\r\n            <Note\r\n                key={note.id}\r\n                note={note}\r\n                openModal={openModal}\r\n                handleMouseOver={handleMouseOver}\r\n                handleDelete={handleDelete}\r\n            />\r\n        )\r\n    })\r\n\r\n\r\n    function openModal(id) {\r\n        setModalClass(\"open-modal\")\r\n        const [note] = notes.filter(note => note.id === id)\r\n        setModalNote(note)\r\n    }\r\n\r\n    function handleModelNoteChange(event) {\r\n        const {name, value} = event.target\r\n        setModalNote(prev => ( {...prev, [name]: value} ))\r\n    }\r\n    \r\n    function closeModal() {\r\n        updateNote(modalNote)\r\n        setModalClass(\"\")\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {modalClass !== \"\" ?\r\n            <Modal\r\n                modalClass={modalClass}\r\n                modalNote={modalNote}\r\n                closeModal={closeModal}\r\n                handleModelNoteChange={handleModelNoteChange}\r\n            /> :\r\n            null}\r\n\r\n            <div id=\"notes\">\r\n                {displayNotes}\r\n            </div>\r\n            {notes.length === 0 ? <Placeholder/> : null}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Notes","import React from \"react\"\r\n\r\nfunction ColorToolTip({colorToolTipPosition, handleColorLeave, handleColorClick}) {\r\n\r\n\r\n    return (\r\n        <div\r\n            id=\"color-tooltip\"\r\n            style={ {display: \"flex\", transform: `translate(${colorToolTipPosition.horizontal}px, ${colorToolTipPosition.vertical}px)`} }\r\n            onMouseLeave={handleColorLeave}\r\n            onClick={handleColorClick}\r\n        >\r\n            <div className=\"color-option\" data-color=\"#fff\" id=\"white\"></div>\r\n            <div className=\"color-option\" data-color=\"#d7aefb\" id=\"purple\"></div>\r\n            <div className=\"color-option\" data-color=\"#fbbc04\" id=\"orange\"></div>\r\n            <div className=\"color-option\" data-color=\"#a7ffeb\" id=\"teal\"></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ColorToolTip","import React, {useState, useEffect} from \"react\"\nimport Header from \"./components/Header\"\nimport FormContainer from \"./components/FormContainer\"\nimport Notes from \"./components/Notes\"\nimport ColorToolTip from \"./components/ColorToolTip\"\n\n\nfunction App() {\n\n    const [notes, setNotes] = useState([])\n    const [showColorToolTip, setShowColorToolTip] = useState(false)\n    const [colorToolTipPosition, setColorToolTipPosition] = useState({})\n    const [colorNoteId, setColorNoteId] = useState(0)\n\n\n    function addNote(note) {\n        setNotes(prev => {\n            const id = prev.length > 0 ? prev[prev.length - 1].id + 1 : 1\n            const noteWithId = {...note, id}\n            return [...prev, noteWithId]\n        })\n    }\n\n    function updateNote(amendedNote) {\n        setNotes(prev => {\n            return prev.map(note => note.id !== amendedNote.id ? note : amendedNote)\n        })\n    }\n\n    function handleDelete(event, id) {\n        event.stopPropagation()\n        setNotes(prev => {\n            return prev.filter(note => note.id !== id)\n        })\n    }\n\n    function handleMouseOver(event, id) {\n        const noteCoords = event.target.getBoundingClientRect()\n        const horizontal = noteCoords.left + window.scrollX - 5\n        const vertical = noteCoords.top + window.scrollY - 5\n        setColorToolTipPosition(() => ({horizontal, vertical}))\n        setColorNoteId(id)\n        setShowColorToolTip(true)\n    }\n\n\n    function handleColorLeave(event) {\n        setShowColorToolTip(false)\n    }\n\n    function handleColorClick(event) {\n        if (!event.target.matches('.color-option')) return\n        const color = event.target.dataset.color\n        setNotes(prev => {\n            return prev.map(note => note.id === colorNoteId ? {...note, color} : note)\n        })\n        setShowColorToolTip(false)\n\n    }\n\n    useEffect(() => {\n        const notesFromStorage = JSON.parse(localStorage.getItem(\"notes\")) || []\n        setNotes(notesFromStorage)\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem(\"notes\", JSON.stringify(notes))\n    }, [notes])\n\n\n    return (\n        <main>\n            <Header/>\n            <FormContainer\n                addNote={addNote}\n                />\n            <Notes\n                notes={notes}\n                updateNote={updateNote}\n                handleMouseOver={handleMouseOver}\n                handleDelete={handleDelete}\n                />\n\n            {showColorToolTip ?\n            <ColorToolTip\n                colorToolTipPosition={colorToolTipPosition}\n                handleColorLeave={handleColorLeave}\n                handleColorClick={handleColorClick}\n            /> : null}\n        </main>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}